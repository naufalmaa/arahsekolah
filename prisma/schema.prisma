// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  passwordHash  String?   // Hashed Password
  role          Role      @default(USER)
  
  // For school_admin assignment
  assignedSchoolId Int?
  assignedSchool   School? @relation("SchoolAdmin", fields: [assignedSchoolId], references: [id])
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  USER
  SCHOOL_ADMIN
  SUPERADMIN
}

model School {
  id         Int      @id @default(autoincrement())
  name       String
  status     String
  npsn       String
  bentuk     String
  telp       String
  alamat     String
  kelurahan  String
  kecamatan  String
  lat        Float?   // nullable
  lng        Float?   // nullable
  
  // New editable fields:
  description   String?  @db.Text
  programs      String?  @db.Text
  achievements  String?  @db.Text
  website       String?
  contact       String?

  // Relations
  reviews       Review[]
  admins        User[]   @relation("SchoolAdmin")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id            Int      @id @default(autoincrement())
  schoolId      Int
  userId        String   // Link to user who created the review
  name          String
  role          String
  biaya         String
  komentar      String
  tanggal       DateTime @default(now())

  // Rating Parameters
  kenyamanan    Int
  pembelajaran  Int
  fasilitas     Int
  kepemimpinan  Int

  // Relations
  school        School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}