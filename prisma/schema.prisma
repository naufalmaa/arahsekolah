generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role      @default(USER)
  assignedSchoolId Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  passwordHash     String?
  reviews          Review[]
  accounts         Account[]
  sessions         Session[]
  assignedSchool   School?   @relation("SchoolAdmin", fields: [assignedSchoolId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model School {
  id           Int      @id @default(autoincrement())
  name         String
  status       String
  npsn         String
  bentuk       String
  telp         String
  alamat       String
  kelurahan    String
  kecamatan    String
  lat          Float?
  lng          Float?
  achievements String?
  contact      String?
  description  String?
  programs     String?
  website      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reviews      Review[]
  admins       User[]   @relation("SchoolAdmin")
}

model Review {
  id           Int      @id @default(autoincrement())
  schoolId     Int
  name         String
  role         String
  biaya        String
  komentar     String
  tanggal      DateTime @default(now())
  kenyamanan   Int
  pembelajaran Int
  fasilitas    Int
  kepemimpinan Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  school       School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  SCHOOL_ADMIN
  SUPERADMIN
}
